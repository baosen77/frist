/*渊子也来赛一赛马。假设每匹马都有恒定的速度，所以速度大的马一定比速度小的马先到终点（没有意外！！）。
不允许出现平局。最后谁赢的场数多于一半(不包括一半)，谁就是赢家(可能没有赢家)。
渊子有N(1≤N≤1000)匹马参加比赛。对手的马的数量与渊子马的数量一样，并且知道所有的马的速度。聪明的你来预测一下这场世纪之战的结果，看看渊子能否赢得比赛。*/
/*输入
输入有多组测试数据。
每组测试数据包括3行：
第一行输入N(1≤N≤1000)。表示马的数量。
第二行有N个整型数字，即渊子的N匹马的速度。
第三行有N个整型数字，即对手的N匹马的速度。
当N为0时退出。
输出
若通过聪明的你精心安排，如果渊子能赢得比赛，那么输出“YES”。
否则输出“NO”。
样例输入
5
2 3 3 4 5
1 2 3 4 5
4
2 2 1 2
2 2 3 1
0
样例输出
YES
NO*/
/*贪心算法：贪心算法的基本思路是从问题的某一个初始解出发一步一步地进行，根据某个优化测度，每一步都要确保能获得局部最优解。
每一步只考虑一个数据，他的选取应该满足局部优化的条件。
若下一个数据和部分最优解连在一起不再是可行解时，就不把该数据添加到部分解中，直到把所有数据枚举完，或者不能再添加算法停止*/
#include<iostream>
using namespace std;
int main()
{
	int array1[1000], array2[1000];
	int n;
	while (cin >> n&&n)
	{
		for (int i = 0; i < n; i++)
			cin >> array1[i];
		for (int i = 0; i < n; i++)
			cin >> array2[i];
		for (int i = 0; i < n - 1; i++)
		{
			for (int j = 0; j < n - i - 1; j++)
			{
				int hold;
				if (array1[j] > array1[j + 1])
				{
					hold = array1[j];
					array1[j] = array1[j + 1];
					array1[j + 1] = hold;
				}
			}
		}
		for (int i = 0; i < n - 1; i++)
		{
			for (int j = 0; j < n - i - 1; j++)
			{
				int hold;
				if (array2[j] > array2[j + 1])
				{
					hold = array2[j];
					array2[j] = array2[j + 1];
					array2[j + 1] = hold;
				}
			}
		}
		int i = 0, j = 0, num = 0;
		for (; i < n; i++)
		{
			if (array1[i] > array2[j])
			{
				num++;
				j++;
			}
		}
		if (num * 2 > n)
			cout << "YES" << endl;
		else cout << "NO" << endl;
	}
}
