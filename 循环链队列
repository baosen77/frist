/*假定用带头结点的循环链表表示队列，并且只设置一个指针指向队尾元素，试设计该队列类，完成相应的入队，出队，置空队，求队长等操作接口。
输入：输入用一行表示，分别为队列长度，以及构成队列的元素，例如：4 3 4 5 6，通过入队操作，构建一个长度为4的队列，其元素为3 4 5 6
输出：输出用一行表示，分别为：队列长度，头元素，一次出队操作，再次求队长。如上例，输出为4 （队长），3（头元素），3（一次出队操作），3（再次求队长）*/
#include<iostream>
using namespace std;
template <class T>
struct Node
{
	T data;
	Node<T>*next;
};
template <class T>
class CLinkQueue
{
private:
	Node<T>*rear;
public:
	CLinkQueue()//构造函数
	{
		rear = new Node<T>;
		rear->next = rear;
	}
	~CLinkQueue()//析构函数
	{
		Node<T>*front = rear->next;
		rear->next = NULL;
		while (front)
		{
			rear = front->next;
			delete front;
			front = rear;
		}
	}
	void EnQueue(T x)//入队
	{
		Node<T>*p = new Node<T>;
		p->data = x;
		p->next = rear->next;
		rear->next = p;
		rear = p;
	}
	void DeQueue()//出队
	{
		Node<T>*p = rear->next->next;
		rear->next->next = p->next;
		if (p==rear)
			rear=p->next;
		delete p;
	}
	T GetFront()
	{
		return rear->next->next->data;
	}
	int GetLength()
	{
		int num = 0;
		Node<T>*a = rear->next;
		while (a != rear)
		{
			num++;
			a = a->next;
		}
		a = NULL;
		delete a;
		return num;
	}
};
int main()
{
	CLinkQueue<int> queue;
	int n;
	cin >> n;
	int*p = new int[n];
	for (int i = 0; i < n; i++)
	{
		cin >> p[i];
		queue.EnQueue(p[i]);
	}
	cout << queue.GetLength() << " " << queue.GetFront() << " " << p[0] << " ";
	queue.DeQueue();
	cout << queue.GetLength() << endl;
	delete p;
}
